ASSIGNMENT STATEMENT:   
temperature = 98.6      #here, the IDENTIFIER/NAME (temperature) is associated with the OBJECT (98.6)
Temperature = 37.0;     #in this example, Temperature is NOT temperature, because Python is CASE-SENSITIVE

RESERVED WORDS:
False       None        True        
and         as          assert      
break       class       continue
def         del         elif
else        except      finally     
for         from        global      
if          import      in          
is          lambda      nonlocal
not         or          pass        
raise       return      try         
while       with        yield

DYNAMICALLY-TYPED:
Unlike Java or C++, Python is DYNAMICALLY-TYPED, so there is no advance declaration of variable type.
In Java or C++, we would declare it to be "int k = 0;"
But in Python, we would declare it to be "k = 0" (NOTICE: there is no semicolon either)

INSTANTIATION:
If there were a "Widget" class, then to instantiate it, the following would be the syntax:
    w = Widget()
If "Widget" has parameters, the following would be the syntax:
    w = Widget(a,b,c)

CALLING METHODS:
Classes in Python may also have METHODS (MEMBER FUNCTIONS) which are called the same way as Java or C++.
For example, if we have a "Widget" class, and it has the method "organize", the following would be the syntax:
    Widget.organize()
But when implementing the class and its methods, the following would be the syntax:
    w = Widget(a,b,c)
    w.organize()
ACCESSORS are methods that return information about the state of an object but do not change the state.
MUTATORS or UPDATE METHODS are methods that change the state of an object.

BUILT-IN CLASSES:
Class       Description                             Immutable? (Y/N)
bool        Boolean value                           Y
int         integer (arbitrary magnitude)           Y
float       floating-point number                   Y
list        mutable sequence of objects             N
tuple       immutable sequence of objects           Y
str         character string                        Y
set         unordered set of distinct objects       N
frozenset   immutable form of set class             Y
dict        associative mapping (aka dictionary)    N

THE bool CLASS:
Has only two base values: True or False
default bool() returns False
Python allows for the creation of a Boolean value from nonboolean type (for example, bool(foo) has the value of foo)
Numbers:    0 = False           1,2,3,etc. = True
Strings:    empty = False       nonempty = True
Lists:      empty = False       nonempty = True
Important interpretation: using a nonboolean value as a conditional in a control structure

THE int CLASS:
Python automatically assigns numbers the int or float type
Literal integers include -345, 27, etc.
However, integral values can be represented using binary, octal, or hexadecimal with a dictated prefix (b, o, x)
Literal represented values include:
0b1011 (binary, using the b)    0o52 (octal, using the o)   0x7f (hexadecimal, using the x)
default int() returns 0
If f is a float, int(f) represents the truncated value  (if f = 3.72, int(f) = 3)   (if f = -3.72, int(f) = -3)
If s is a string, int(s) represents the integral value  (if s = '198', int(s) = 198)    (if s = 'hello', int(s) = ValueError)
Conversion from a different base requires two parameters: the value and the base    (int('7f', 16) is 127, as 7f is converted from 16 (hexadecimal) --> 7*16 + 15 = 127)

THE float CLASS:
The trailing zero is optional, so it is legal to use 2 as a float rather than 2.0
Float can use scientific notation: f = 6.022e23 (Yay, Avogadro's number!)
default float() returns 0.0
float(2) represents 2.0
float('3.14') represents ValueError (as '3.14' is a string, and float cannot parse strings)